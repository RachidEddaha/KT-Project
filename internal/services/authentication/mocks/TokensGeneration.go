// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	dto "KTOnlinePlatform/internal/dto"

	mock "github.com/stretchr/testify/mock"
)

// TokensGeneration is an autogenerated mock type for the TokensGeneration type
type TokensGeneration struct {
	mock.Mock
}

// GenerateAuthTokens provides a mock function with given fields: userID, username
func (_m *TokensGeneration) GenerateAuthTokens(userID int, username string) (dto.JWTTokens, error) {
	ret := _m.Called(userID, username)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAuthTokens")
	}

	var r0 dto.JWTTokens
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (dto.JWTTokens, error)); ok {
		return rf(userID, username)
	}
	if rf, ok := ret.Get(0).(func(int, string) dto.JWTTokens); ok {
		r0 = rf(userID, username)
	} else {
		r0 = ret.Get(0).(dto.JWTTokens)
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(userID, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokensGeneration creates a new instance of TokensGeneration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokensGeneration(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokensGeneration {
	mock := &TokensGeneration{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
